package PantallasRecepcionista;

import DAO.*;
import Informacion.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.text.SimpleDateFormat;
import java.time.LocalDate;
import java.time.LocalTime;
import java.time.format.DateTimeFormatter;
import java.util.Date;
import java.util.Map;
import javax.swing.JOptionPane;
import javax.swing.Timer;
import javax.swing.table.DefaultTableModel;

public class PanelAlquilarEquipos extends javax.swing.JPanel {

    DAOControlAlquilerImplements daoAlquiler = new DAOControlAlquilerImplements();
    Control_Tiempo CT = new Control_Tiempo();
    Equipo ET = new Equipo();
    Cliente ClT = new Cliente();
    Map<String, Integer> EquipoMap, EquipoMapTodos, ClienteMap;
    Object valor1, valor2, valor3, valor4, valor5, valor6, valor7, valor8,valor9;
    int validadorinsert = 0;

    public PanelAlquilarEquipos(Usuario usuarios) {
        initComponents();
        iniciarTimer();
        CT.setUsuario(usuarios);
        CT.setCliente(ClT);
        CT.setEquipo(ET);
        daoAlquiler.ListarControlAlquiler(CT, jTableAlquiler);
        EquipoMap = daoAlquiler.ComboEquipos(comboEquipos);
        EquipoMapTodos = daoAlquiler.ListarIDEq(CT);
        ClienteMap = daoAlquiler.ComboClientes(Cmb_Cliente);
        //----------------------
        BtnActualizar.setEnabled(false);
        BtnCobrarAlquiler.setEnabled(false);
        BtnRegistrar.setEnabled(true);
        Cmb_Cliente.setEnabled(false);
        comboEquipos.setEnabled(false);
        Spinner_Tiempo.setEnabled(false);
        Btn_guardar.setEnabled(false);
        Btn_cancelar.setEnabled(false);
        txtHora_final.setText("");
        lblPrecioFinal.setText("-");
    }

    private void iniciarTimer() {
        Timer timer = new Timer(1000, new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                // Obtener la hora actual de Per√∫
                Date now = new Date();
                SimpleDateFormat sdf = new SimpleDateFormat("HH:mm:ss");
                // Actualizar el JFormattedTextField
                Hora_Actual.setText(sdf.format(now));
            }
        });
        timer.start();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        BtnCobrarAlquiler = new javax.swing.JButton();
        BtnActualizar = new javax.swing.JButton();
        BtnRegistrar = new javax.swing.JButton();
        jPanelOpciones = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        txtHora_final = new javax.swing.JFormattedTextField();
        jLabel7 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        Cmb_Cliente = new javax.swing.JComboBox<>();
        comboEquipos = new javax.swing.JComboBox<>();
        Hora_Actual = new javax.swing.JFormattedTextField();
        Spinner_Tiempo = new javax.swing.JSpinner();
        Btn_guardar = new javax.swing.JButton();
        Btn_cancelar = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        lblPrecioFinal = new javax.swing.JLabel();
        jTextField2 = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTableAlquiler = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setPreferredSize(new java.awt.Dimension(1060, 720));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        BtnCobrarAlquiler.setText("COBRAR ALQUILER");
        BtnCobrarAlquiler.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnCobrarAlquilerActionPerformed(evt);
            }
        });
        jPanel1.add(BtnCobrarAlquiler, new org.netbeans.lib.awtextra.AbsoluteConstraints(800, 120, 220, 40));

        BtnActualizar.setText("ACTUALIZAR ALQUILER");
        BtnActualizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnActualizarActionPerformed(evt);
            }
        });
        jPanel1.add(BtnActualizar, new org.netbeans.lib.awtextra.AbsoluteConstraints(290, 120, 220, 40));

        BtnRegistrar.setText("REGISTRAR ALQUILER");
        BtnRegistrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnRegistrarActionPerformed(evt);
            }
        });
        jPanel1.add(BtnRegistrar, new org.netbeans.lib.awtextra.AbsoluteConstraints(540, 120, 220, 40));

        jPanelOpciones.setBackground(new java.awt.Color(0, 32, 78));
        jPanelOpciones.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "OPCIONES", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI Black", 0, 14), new java.awt.Color(255, 255, 255))); // NOI18N
        jPanelOpciones.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel2.setFont(new java.awt.Font("Segoe UI Black", 0, 14)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("EQUIPO :");
        jPanelOpciones.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 90, 70, 20));

        jLabel4.setFont(new java.awt.Font("Segoe UI Black", 0, 14)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setText("HORA ACTUAL :");
        jPanelOpciones.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 150, 120, 20));

        jLabel5.setFont(new java.awt.Font("Segoe UI Black", 0, 14)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(255, 255, 255));
        jLabel5.setText("TIEMPO DE ALQUILER :");
        jPanelOpciones.add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 190, -1, 40));

        jLabel6.setFont(new java.awt.Font("Segoe UI Black", 0, 14)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(255, 255, 255));
        jLabel6.setText("HORA FINAL :");
        jPanelOpciones.add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 290, 100, 20));

        txtHora_final.setEditable(false);
        txtHora_final.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.DateFormatter(java.text.DateFormat.getTimeInstance(java.text.DateFormat.FULL))));
        jPanelOpciones.add(txtHora_final, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 280, 100, 40));

        jLabel7.setFont(new java.awt.Font("Segoe UI Black", 0, 14)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(255, 255, 255));
        jLabel7.setText("PRECIO :");
        jPanelOpciones.add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 340, 80, 30));

        jLabel9.setFont(new java.awt.Font("Segoe UI Black", 0, 14)); // NOI18N
        jLabel9.setForeground(new java.awt.Color(255, 255, 255));
        jLabel9.setText("CLIENTE :");
        jPanelOpciones.add(jLabel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 40, 70, 20));

        jLabel8.setFont(new java.awt.Font("Segoe UI Black", 0, 18)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(255, 255, 255));
        jLabel8.setText("S/.");
        jPanelOpciones.add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 340, 30, 30));

        jPanelOpciones.add(Cmb_Cliente, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 30, 130, 40));

        jPanelOpciones.add(comboEquipos, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 80, 130, 40));

        Hora_Actual.setEditable(false);
        Hora_Actual.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.DateFormatter(java.text.DateFormat.getTimeInstance(java.text.DateFormat.FULL))));
        Hora_Actual.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Hora_ActualActionPerformed(evt);
            }
        });
        jPanelOpciones.add(Hora_Actual, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 140, 90, 40));

        Spinner_Tiempo.setModel(new javax.swing.SpinnerNumberModel(60, 60, null, 60));
        Spinner_Tiempo.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                Spinner_TiempoStateChanged(evt);
            }
        });
        jPanelOpciones.add(Spinner_Tiempo, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 230, 80, 34));

        Btn_guardar.setText("GUARDAR");
        Btn_guardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Btn_guardarActionPerformed(evt);
            }
        });
        jPanelOpciones.add(Btn_guardar, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 450, 170, 40));

        Btn_cancelar.setText("CANCELAR");
        Btn_cancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Btn_cancelarActionPerformed(evt);
            }
        });
        jPanelOpciones.add(Btn_cancelar, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 520, 170, 40));

        jLabel3.setFont(new java.awt.Font("Segoe UI Black", 1, 14)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("minutos");
        jPanelOpciones.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 240, 70, -1));

        lblPrecioFinal.setFont(new java.awt.Font("Segoe UI Black", 0, 18)); // NOI18N
        lblPrecioFinal.setForeground(new java.awt.Color(255, 255, 255));
        lblPrecioFinal.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblPrecioFinal.setText("-");
        jPanelOpciones.add(lblPrecioFinal, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 340, 40, 40));

        jPanel1.add(jPanelOpciones, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 100, 240, 590));

        jTextField2.setEditable(false);
        jTextField2.setBackground(new java.awt.Color(19, 56, 235));
        jTextField2.setFont(new java.awt.Font("Franklin Gothic Heavy", 0, 21)); // NOI18N
        jTextField2.setForeground(new java.awt.Color(255, 255, 255));
        jTextField2.setText("  Alquiler Equipos");
        jTextField2.setBorder(null);
        jTextField2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField2ActionPerformed(evt);
            }
        });
        jPanel1.add(jTextField2, new org.netbeans.lib.awtextra.AbsoluteConstraints(-10, -10, 1080, 80));

        jTableAlquiler.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "ID", "EQUIPO", "FECHA INICIAL", "HORA INICIAL", "FECHA FINAL", "HORA FINAL", "TIEMPO RESTANTE", "CLIENTE", "PRECIO PAGADO"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTableAlquiler.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jTableAlquilerMousePressed(evt);
            }
        });
        jScrollPane1.setViewportView(jTableAlquiler);

        jPanel1.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 180, 750, 520));

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/fondoPaneles.jpg"))); // NOI18N
        jPanel1.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1060, 720));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jTextField2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField2ActionPerformed

    private void Hora_ActualActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Hora_ActualActionPerformed

    }//GEN-LAST:event_Hora_ActualActionPerformed

    private void jTableAlquilerMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTableAlquilerMousePressed
        int selectedRow = jTableAlquiler.getSelectedRow();
        DefaultTableModel model = (DefaultTableModel) jTableAlquiler.getModel();
        if (!jTableAlquiler.isEnabled()) {
            return; // No hacer nada si la tabla est√° deshabilitada
        }
        // Verificar si se ha seleccionado una fila v√°lida
        if (selectedRow != -1) {
            // Obtener los valores de la fila seleccionada
            valor1 = model.getValueAt(selectedRow, 0); // Columna 0
            valor2 = model.getValueAt(selectedRow, 1); // Columna 1
            valor3 = model.getValueAt(selectedRow, 2); // Columna 2
            valor4 = model.getValueAt(selectedRow, 3); // Columna 0
            valor5 = model.getValueAt(selectedRow, 4); // Columna 1
            valor6 = model.getValueAt(selectedRow, 5); // Columna 2
            valor7 = model.getValueAt(selectedRow, 6); // Columna 0
            valor8 = model.getValueAt(selectedRow, 7); // Columna 1
            valor9 = model.getValueAt(selectedRow, 8); // Columna 1
            // Desbloquear los botones
            BtnCobrarAlquiler.setEnabled(true);
            BtnActualizar.setEnabled(true);
            BtnRegistrar.setEnabled(false);
            // Mostrar valores en el JTextField, JComboBox y JLabel
            txtHora_final.setText(valor6.toString());
            Cmb_Cliente.setSelectedItem(valor8); // Aseg√∫rate de que el valor est√© en el JComboBox
            comboEquipos.setSelectedItem(valor2); // Aseg√∫rate de que el valor est√© en el JComboBox
            lblPrecioFinal.setText(valor9.toString());
        }
    }//GEN-LAST:event_jTableAlquilerMousePressed
    public int convertirTiempoASegundos(String tiempo) {
        String[] partes = tiempo.split(":");
        int horas = Integer.parseInt(partes[0]);
        int minutos = Integer.parseInt(partes[1]);
        int segundos = Integer.parseInt(partes[2]);

        // Convertir todo a segundos
        int totalSegundos = (horas * 3600) + (minutos * 60) + segundos;
        return totalSegundos;
    }
    private void BtnActualizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnActualizarActionPerformed
        validadorinsert = 2;

        BtnActualizar.setEnabled(false);
        BtnCobrarAlquiler.setEnabled(false);
        BtnRegistrar.setEnabled(false);
        Cmb_Cliente.setEnabled(false);
        comboEquipos.setEnabled(false);
        Spinner_Tiempo.setEnabled(true);
        Btn_guardar.setEnabled(true);
        Btn_cancelar.setEnabled(true);
        jTableAlquiler.setEnabled(false);
    }//GEN-LAST:event_BtnActualizarActionPerformed
    public LocalDate parseObjectToLocalDate(Object fechaObjeto) {
        // System.out.println(fechaObjeto);

        if (fechaObjeto != null) {
            String fechaCadena = (String) fechaObjeto;
            DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd");
            return LocalDate.parse(fechaCadena, formatter);
        } else {
            throw new IllegalArgumentException("El objeto no contiene una fecha v√°lida en formato cadena.");
        }
    }

    public LocalTime parseObjectToLocalTime(Object horaObjeto) {
        // Asegurarse de que el objeto no sea nulo y sea una instancia de String
        if (horaObjeto != null && horaObjeto instanceof String) {
            String horaCadena = (String) horaObjeto;
            DateTimeFormatter formatter = DateTimeFormatter.ofPattern("HH:mm:ss");
            return LocalTime.parse(horaCadena, formatter);
        } else {
            throw new IllegalArgumentException("El objeto no contiene una hora v√°lida en formato cadena.");
        }
    }

    public int convertirSegundosAMinutos(int segundos) {
        // Dividir los segundos por 60 y redondear al n√∫mero entero m√°s cercano
        return Math.round(segundos / 60.0f);
    }
    private void BtnCobrarAlquilerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnCobrarAlquilerActionPerformed
        int seg = convertirTiempoASegundos(valor7.toString());
        int minguardados = 0;

        //   if (seg > 0) {
        minguardados = convertirSegundosAMinutos(seg);
        CT.setId_Alquiler(Integer.parseInt(valor1.toString()));
        CT.getEquipo().setId_equipo(EquipoMapTodos.get(valor2));
        CT.setFechaAlquilerInicial(parseObjectToLocalDate(valor3.toString()));
        Spinner_Tiempo.getValue();
        CT.setHoraInicio(parseObjectToLocalTime(valor4.toString()));
        CT.setFechaAlquilerFinal(parseObjectToLocalDate(valor5.toString()));
        CT.setHoraFinalEstimada(parseObjectToLocalTime(valor6.toString()));
        CT.setTiempoRestante(minguardados);
        CT.getCliente().setDNICliente(ClienteMap.get(valor8).toString());
        CT.setPrecio(Double.parseDouble(lblPrecioFinal.getText()));
// Imprimir los valores asignados a CT para verificar
        System.out.println("ID Alquiler: " + CT.getId_Alquiler());
        System.out.println("ID Equipo: " + CT.getEquipo().getId_equipo());
        System.out.println("Fecha Alquiler Inicial: " + CT.getFechaAlquilerInicial());
        System.out.println("Hora Inicio: " + CT.getHoraInicio());
        System.out.println("Fecha Alquiler Final: " + CT.getFechaAlquilerFinal());
        System.out.println("Hora Final Estimada: " + CT.getHoraFinalEstimada());
        System.out.println("Tiempo Restante: " + CT.getTiempoRestante());
        System.out.println("PRECIO: " + CT.getPrecio());
        System.out.println("DNI Cliente: " + CT.getCliente().getDNICliente());
        daoAlquiler.ActualizarMinutos(CT);
        daoAlquiler.ActualizarEstadoEquipoLibre(CT);
        daoAlquiler.ActualizarEstadoEquipoControl(CT);
        daoAlquiler.CobrarAlquiler(CT);
        daoAlquiler.ListarControlAlquiler(CT, jTableAlquiler);
//        } else {
//            // Tiempo restante es menor que 0, preguntar si desea cobrar el tiempo extra o el tiempo pagado inicialmente
//            String[] options = {"Cobrar tiempo extra", "Cobrar tiempo pagado inicialmente"};
//            int respuesta = JOptionPane.showOptionDialog(null,
//                    "El tiempo ha expirado. ¬øQu√© desea hacer?",
//                    "Tiempo Extra",
//                    JOptionPane.DEFAULT_OPTION,
//                    JOptionPane.QUESTION_MESSAGE,
//                    null,
//                    options,
//                    options[0]);
//
//            if (respuesta == 0) {
//                // L√≥gica para cobrar el tiempo extra
//                System.out.println("Cobrando el tiempo extra...");
//                // Aqu√≠ puedes agregar la l√≥gica espec√≠fica para manejar el cobro del tiempo extra
//            } else if (respuesta == 1) {
//                // L√≥gica para manejar el caso en que se cobra solo el tiempo pagado inicialmente
//                System.out.println("Cobrando solo el tiempo pagado inicialmente...");
//                // Aqu√≠ puedes agregar la l√≥gica espec√≠fica para manejar el cobro solo del tiempo pagado inicialmente
//            }
//        }
    }//GEN-LAST:event_BtnCobrarAlquilerActionPerformed

    private void Btn_guardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Btn_guardarActionPerformed
        boolean valprocesoexitoso = false;
        if (validadorinsert == 1) {

            CT.getEquipo().setId_equipo(EquipoMap.get(comboEquipos.getSelectedItem()));
            //  CT.setFechaAlquilerInicial(parseObjectToLocalDate(valor3.toString()));

            CT.setHoraInicio(parseObjectToLocalTime(Hora_Actual.getText().toString()));
            // CT.setFechaAlquilerFinal(parseObjectToLocalDate(valor5.toString()));
            // CT.setHoraFinalEstimada(parseObjectToLocalTime(valor6.toString()));
            CT.setTiempoAgregador(Integer.parseInt(Spinner_Tiempo.getValue().toString()));
            CT.setTiempoRestante(0);
            CT.setPrecio(Double.parseDouble(lblPrecioFinal.getText()));
            CT.getCliente().setDNICliente(ClienteMap.get(Cmb_Cliente.getSelectedItem()).toString());
            valprocesoexitoso = daoAlquiler.InsertarAlquiler(CT);

        } else if (validadorinsert == 2) {
            CT.setId_Alquiler(Integer.parseInt(valor1.toString()));
            CT.getEquipo().setId_equipo(EquipoMap.get(comboEquipos.getSelectedItem()));
            CT.setFechaAlquilerInicial(parseObjectToLocalDate(valor3.toString()));
            Spinner_Tiempo.getValue();
            CT.setHoraInicio(parseObjectToLocalTime(valor4.toString()));
            CT.setFechaAlquilerFinal(parseObjectToLocalDate(valor5.toString()));
            CT.setHoraFinalEstimada(parseObjectToLocalTime(valor6.toString()));
            // CT.setTiempoRestante(seg);
            CT.getCliente().setDNICliente(ClienteMap.get(valor8).toString());

            valprocesoexitoso = daoAlquiler.ActualizarAlquiler(CT);
        }
        if (valprocesoexitoso) {
            // Llamar al m√©todo para listar el control de alquiler
            try {

                BtnActualizar.setEnabled(false);
                BtnCobrarAlquiler.setEnabled(false);
                BtnRegistrar.setEnabled(true);
                Cmb_Cliente.setEnabled(false);
                comboEquipos.setEnabled(false);
                Spinner_Tiempo.setEnabled(false);
                Btn_guardar.setEnabled(false);
                Btn_cancelar.setEnabled(false);
                jTableAlquiler.setEnabled(true);

                txtHora_final.setText("");
                Cmb_Cliente.setSelectedIndex(0); // Aseg√∫rate de que el valor est√© en el JComboBox
                comboEquipos.setSelectedIndex(0);
                lblPrecioFinal.setText("-");
                daoAlquiler.ListarControlAlquiler(CT, jTableAlquiler);
                // Actualizar la interfaz de usuario despu√©s de listar el control de alquiler
                jTableAlquiler.repaint();
                jTableAlquiler.revalidate();

                // Mostrar mensaje de √©xito
                JOptionPane.showMessageDialog(null, "El proceso se complet√≥ exitosamente.", "√âxito", JOptionPane.INFORMATION_MESSAGE);
            } catch (Exception e) {
                // Manejar posibles errores durante el listado
                JOptionPane.showMessageDialog(null, "Ocurri√≥ un error al listar el control de alquiler: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
                e.printStackTrace();
            }
        } else {
            // Manejo de caso cuando el proceso no es exitoso
            JOptionPane.showMessageDialog(null, "El proceso no se complet√≥ correctamente.", "Advertencia", JOptionPane.WARNING_MESSAGE);
        }

    }//GEN-LAST:event_Btn_guardarActionPerformed

    private void BtnRegistrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnRegistrarActionPerformed
        validadorinsert = 1;

        BtnActualizar.setEnabled(false);
        BtnCobrarAlquiler.setEnabled(false);
        BtnRegistrar.setEnabled(false);
        Cmb_Cliente.setEnabled(true);
        comboEquipos.setEnabled(true);
        Spinner_Tiempo.setEnabled(true);
        Btn_guardar.setEnabled(true);
        Btn_cancelar.setEnabled(true);
        jTableAlquiler.setEnabled(false);

    }//GEN-LAST:event_BtnRegistrarActionPerformed

    private void Btn_cancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Btn_cancelarActionPerformed
        BtnActualizar.setEnabled(false);
        BtnCobrarAlquiler.setEnabled(false);
        BtnRegistrar.setEnabled(true);
        Cmb_Cliente.setEnabled(false);
        comboEquipos.setEnabled(false);
        Spinner_Tiempo.setEnabled(false);
        Btn_guardar.setEnabled(false);
        Btn_cancelar.setEnabled(false);
        jTableAlquiler.setEnabled(true);

        txtHora_final.setText("");
        Cmb_Cliente.setSelectedIndex(0); // Aseg√∫rate de que el valor est√© en el JComboBox
        comboEquipos.setSelectedIndex(0);
        lblPrecioFinal.setText("-");
    }//GEN-LAST:event_Btn_cancelarActionPerformed

    private void Spinner_TiempoStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_Spinner_TiempoStateChanged
        int value = (int) Spinner_Tiempo.getValue();
        int precio = (value / 60) * 3;
        // Actualizar el texto del JLabel
        lblPrecioFinal.setText("" + precio);

    }//GEN-LAST:event_Spinner_TiempoStateChanged


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton BtnActualizar;
    private javax.swing.JButton BtnCobrarAlquiler;
    private javax.swing.JButton BtnRegistrar;
    private javax.swing.JButton Btn_cancelar;
    private javax.swing.JButton Btn_guardar;
    private javax.swing.JComboBox<String> Cmb_Cliente;
    private javax.swing.JFormattedTextField Hora_Actual;
    private javax.swing.JSpinner Spinner_Tiempo;
    private javax.swing.JComboBox<String> comboEquipos;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanelOpciones;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTableAlquiler;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JLabel lblPrecioFinal;
    private javax.swing.JFormattedTextField txtHora_final;
    // End of variables declaration//GEN-END:variables
}
